#!/usr/bin/perl
##############################################################################
#
# Script:   dgrep
#
# Author:   Donovan Jones <donovan@catalyst.net.nz>
#
# Description:
#
# grep preprocessor with better pruning options than grep.
# Accepts all grep arguments
#
# TODO
# Add ---norecurse (-R) switch for making non recursive
# Add --dir (-d) for passing basedir, currently uses pwd

use strict;
use warnings;

use Pod::Usage;
use Getopt::Long qw(GetOptions);
use File::Find;
use File::Basename;
use File::Slurp;
use Cwd;
use File::HomeDir;

my $home_dir = File::HomeDir->my_home;

my $config_file = "$home_dir/.dgrep-ignore";

my $ignore = {};

foreach my $line (read_file($config_file)) {
    chomp($line);
    my ($type,$arg) = split/:/, $line;
    push @{$ignore->{$type}}, $arg;
}

my $cwd = cwd();

my(%opt);

if(!GetOptions(\%opt, 'help|?', 'verbose|v')) {
    pod2usage(-exitval => 1,  -verbose => 0);
}

pod2usage(-exitstatus => 0, -verbose => 1) if $opt{help};

my @files_to_grep;

find(\&process_file, $cwd);

my %ignore;

sub process_file {

    my $file = $File::Find::name;

    if ( grep {$file =~ m{ / $_ \z }xms} @{$ignore->{file}} ) {
        $ignore{"file match:   ignoring file => $file"}++ if $opt{verbose};
        return;
    }
    if ( my ($dir) = grep {$file =~ m{ $_ }xms} @{$ignore->{dir}} ) {
        $ignore{"dir match:    ignoring dir  => $dir"}++ if $opt{verbose};
        return;
    }

    if (-f $file) {
        my $suffix = (fileparse($file, qr/\.[^.]*/))[2];
        if ( grep {".$_" eq $suffix} @{$ignore->{suffix}} ) {
            $ignore{"suffix match: ignoring file => $file"}++ if $opt{verbose};
        }
        else {
            $file =~ s{$cwd/}{}xms;
            push @files_to_grep, $file;
        }
    }
    elsif (-d $file) {
    }

}

if ($opt{verbose}) {
    print "Ignoring the following files and directories:\n\n";
    foreach my $ignore_message (sort keys %ignore) {
        print $ignore_message . "\n";
    }
    print "\n---------------------------------------------\n";
}


my $files;
foreach my $file (sort @files_to_grep) {
    $files .= "$file\n";
}

write_file('xargs-tmp-file', $files);

my @commands = qw(
    xargs
    -a
    xargs-tmp-file
    grep
    -I
);

push(@commands, @ARGV);

system(@commands);

unlink 'xargs-tmp-file';

exit 0;

__END__

=head1 NAME

dgrep - grep preprocessor with better pruning

=head1 SYNOPSIS

  dgrep [options] [--] [grep options] string

  Options:

   --help     detailed help message
   --verbose  displays the list for files and directories that will be ignored
   --         any options after this are passed to grep

=head1 DESCRIPTION

Dgrep is a grep preprocessor designed to prune files and directories before
grepping. It is designed to filter the list of files grep will search and then
call grep exactly as normal. It should output exactly what grep would output
minus any output that would have resulted from any pruned files.

Dgrep only operates in recursive grep mode and does not require a path.

Examples:

$ grep -r foo *
$ dgrep foo

$ grep -rl rotate *
$ dgrep rotate -- -l

Config:

dgrep uses a config file called ~/.dgrep-ignore to get the list of files to
ignore, here is an example :

--------------------------
# this is a comment in .dgrep-ignore
# the following line makes grep ignore the specific jquery file
file:js/jquery-ui-1.7.2.custom.min.js
# the following line makes grep ignore everything under the .git dir
dir:.git/
# the following line makes grep ignore all fies with a .sql suffix
suffix:sql
--------------------------

Alternatives:

You may want to take a look at the tool ack: http://betterthangrep.com/

"ack is a tool like grep, designed for programmers with large trees of
heterogeneous source code. "

The reason I prefer dgrep is I like and am familiar with grep and wish to
simply give it better pruning abilities and then get out the way. With ack you
need to learn a new syntax and there is no ganrentee you will find it on
$random_box


=head1 OPTIONS

=over 4

=item B<--help>

Display this documentation.

=back

=cut
